<?php

namespace {{ namespace }}\Notification;

{% block use_statements %}
use IrishDan\NotificationBundle\Notification\NotificationInterface;
use IrishDan\NotificationBundle\Notification\NotifiableInterface;
{% endblock use_statements %}

{% block class_definition %}
/**
 * Class {{ class_name }}
 *
 * @package {{ namespace }}\Notification
 */
class {{ class_name }} implements NotificationInterface
{% endblock class_definition %}
{
{% block class_body %}

    protected $data = [
        'title' => 'New member',
        'body' => 'New member, %s, just joined',
        'html_email' => true,
    ];

    /**
     * The recipient of this notification
     *
     * @var NotifiableInterface
     */
    protected $notifiable;

    /**
     * The channel that this instance is sent using
     *
     * @var string
     */
    protected $channel;

    /**
     * A unique identifier for this notification.
     * Will be common across different channels.
     *
     * @var
     */
    protected $uuid;

    /**
     * Sets the channel that this notification instance is sent using
     *
     * @param $channel
     */
    public function setChannel($channel)
    {
        $this->channel = $channel;
    }

    /**
     * @return mixed
     */
    public function getUuid()
    {
        return $this->uuid;
    }

    /**
     * @param string $uuid
     */
    public function setUuid($uuid)
    {
        $this->uuid = $uuid;
    }

    /**
     * Returns the channel this notification was sent using
     *
     * @return mixed
     */
    public function getChannel()
    {
        return $this->channel;
    }

    /**
     * @return mixed
     */
    public function getNotifiable()
    {
        return $this->notifiable;
    }

    /**
     * @param NotifiableInterface $notifiable
     */
    public function setNotifiable(NotifiableInterface $notifiable)
    {
        $this->notifiable = $notifiable;
    }

    /**
     * Returns an array of channels that the nofication should be sent via.
     * Note if a user is not subscribed to a channel then its not sent with that channel.
     *
     * @return array
     */
    public function getChannels()
    {
        return ['{{ channels |join("', '") }}'];
    }

    /**
     * Returns the array of notification data which is used by all channels,
     * to generate the notification.
     *
     * @return array
     */
    public function getDataArray()
    {
        return $this->data;
    }

    public function getTemplateArray()
    {
        // The view template to use for this message. can switch depending on the channel.
        return [
            'title' => 'NotificationBundle:{{ name }}:title.html.twig',
            'body' => 'NotificationBundle:{{ name }}:' . $this->channel . '.message.html.twig',
        ];
    }

    public function setDataArray(array $data)
    {
        $this->data = $data;
    }

{% endblock class_body %}
}